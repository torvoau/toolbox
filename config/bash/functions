
vi() {
    nvim ${@}
}

vim() {
    nvim ${@}
}

man() {
    export LESS_TERMCAP_mb=$(printf "\e[38;2;255;255;255m") # Start blinking
    export LESS_TERMCAP_md=$(printf "\e[38;2;33;136;255m") # Start bold mode
    export LESS_TERMCAP_me=$(printf "\e[38;2;255;255;255m") # End all mode like so, us, mb, md, and mr
    export LESS_TERMCAP_so=$(printf "\e[38;2;255;255;255m") # Start standout mode
    export LESS_TERMCAP_se=$(printf "\e[38;2;255;255;255m") # End standout mode
    export LESS_TERMCAP_us=$(printf "\e[38;2;255;255;255m") # Start underlining
    export LESS_TERMCAP_ue=$(printf "\e[38;2;255;255;255m") # End underlining
    export GROFF_NO_SGR=1
    /usr/bin/man ${@}
}

shortcuts_list() {
    echo "# Bash Bindings"
    man bash  | grep -e '(C-' -e '(M-' -e '(S-'
    echo "# Tmux Bindings"
    tmux list-keys -N
    # echo "# Vim Bindings"
    # vim -c "help index"
}

git_status() {
  git status
}

git_push() {
  echo "Pushing commit with message: ${1:-update}"
  git add --all
  git commit -m "${1:-update}"
  git push origin $(git rev-parse --abbrev-ref HEAD)
}

git_pull() {
    git pull origin $(git rev-parse --abbrev-ref HEAD)
}

git_cleanup() {
    # Instructions only
    echo "# Remove the ref folder from all history"
    echo "git-filter-repo --path ref/ --invert-paths"
    echo "# Reset Upstream & Push"
    echo "git push --set-upstream origin main --force"
    echo "# Make sure users clone the repository or"
    echo "git reset --hard origin/main"
}

wsl_upgrade() {
    sudo apt update -y
    sudo apt full-upgrade -y
    sudo apt --purge autoremove -y
    sudo apt install update-manager-core -y
    sudo do-release-upgrade
}

color_set() {
    # hex="#11001A"
    target="${1}"
    hex="${2}"
    rgb=$(printf "%d;%d;%d" 0x${hex:1:2} 0x${hex:3:2} 0x${hex:5:2})
    printf "\e[${target};2;${color}m\n"
}


color_init() {

    COLOR_NONE='\e[0m'
    COLOR_WHITE='255;255;255' 
    COLOR_BLACK='0;0;0'
    COLOR_BLUE='33;136;255'     #2188ff
    COLOR_RED='215;58;73'       #d73a49
    COLOR_GREEN='209;213;218'   #28a745
    COLOR_FOREGROUND='36;41;46' #24292e
    # COLOR_TEXT='209;213;218'  #d1d5da 

    # Terminal Colours
    printf "\e[38;2;${COLOR_WHITE}m\n" 
    printf "\e[48;2;${COLOR_FOREGROUND}m\n"

    # Git Colors
    # git help --config | grep color
    git config --global color.status.changed "#d73a49"
    git config --global color.status.untracked "#d73a49"

    # LESS_TERMCAP_so=$(printf "\e[48;2;33;136;255m")


    # export LESS_TERMCAP_mb=$'\e[33;136;255m'  # Start blinking
    # export LESS_TERMCAP_md=$'\e[209;213;218m' # Start bold mode
    # export LESS_TERMCAP_so=$'\e[255;255;255m' # Start standout mode
    # export LESS_TERMCAP_so=$'\e[233;136;255m' # Start standout mode
    # export LESS_TERMCAP_us=$'\e[33;136;255m'  # Start underlining
    # export LESS_TERMCAP_me=$'\e[209;213;218m' # End all mode like so, us, mb, md, and mr
    # export LESS_TERMCAP_se=$'\e[209;213;218m' # End standout mode
    # export LESS_TERMCAP_ue=$'\e[209;213;218m' # End underlining

    # Set Prompt
    export PS1="[\u:\w]: "

    clear # Clear Screen

}

tmux_help() {
    echo "Tmux Help:"
    echo "   f   : Window New Fuzzy Find & CD"
    echo "   e   : Window New Fuzzy Find & Vi"
    echo "   r   : Window New Fuzzy Find & Run"
    echo "  <N>  : Window Select"
    echo "   x   : Window Kill"
    echo "   w   : Session/Window/Pane Choose"
    echo "   h   : Show Help"
    echo "   ?   : Show All Shortcuts"
    # echo "   n   : Window Next"
    # echo "   p   : Window Previous"
    # echo " <Tab> : Window Last"
}

# man2() { 
#   man -P 'less -p ^EXAMPLES' $1
# } 

tmux_run() {
    tmux attach-session || tmux new-session -n main
    # [ -z "$TMUX" ] && { tmux attach-session || exec tmux new-session && exit; }
}

tmux_clear() {
    tmux kill-session -a
}

fzf_pretty() {
    fzf \
      --margin 0,0 \
      --padding 0,0 \
      --border sharp \
      --preview-window border-sharp \
      --color "hl:#2188ff,bg+:#2188ff,info:#2188ff,prompt:#2188ff,marker:#2188ff,spinner:#2188ff,header:#778899" \
      --color "fg:#ffffff,preview-fg:#ffffff,hl+:#ffffff,pointer:#ffffff,fg+:#ddeeff,border:#778899" \
      "${@}"
}

# Reference:  https://thevaluable.dev/practical-guide-fzf-example/
# FIXME: Only kill finder window?
# FIXME: Use bfs and fix performance then remove max depth

tmux_find_cd() {
    target=$(find -mindepth 1 -maxdepth 3 -type d | fzf_pretty -e --preview "tree {}" --header "[F]ind Directory")
    if [[ -z "${target}" ]]; then tmux kill-window && return 0; fi
    tmux_new_window $target
    tmux send-keys "source <(toolbox init)" Enter
    tmux send-keys "cd " $target " && clear" Enter
    tmux kill-window -t :!
}

tmux_find_nvim() {
    target=$(find -mindepth 1 -maxdepth 3 -type f | fzf_pretty -e --preview "cat {}" --header "[E]dit File")
    if [[ -z "${target}" ]]; then tmux kill-window && return 0; fi
    tmux_new_window $target
    tmux send-keys "source <(toolbox init)" Enter
    tmux send-keys "nvim " $target " && clear" Enter
    tmux kill-window -t :!
}

tmux_find_get() {
    target=$(find -mindepth 1 -maxdepth 3 -type f -executable | fzf_pretty -e --preview "cat {}" --header "[G]et File") 
    if [[ -z "${target}" ]]; then tmux kill-window && return 0; fi
    tmux_new_window $target
    tmux send-keys "source <(toolbox init)" Enter
    tmux send-keys $target Space
    tmux kill-window -t :!
}

tmux_new_window() {
    target="${1}"
    name=$(basename "${target}" | tr "." "/" | tr "./" "/" | tr -d "[:blank:]")
    echo "Loading Window $name with Target $target"
    if ! tmux has-session -t=":${name}" 2> /dev/null; then
        echo "Created Window $name"
        tmux new-window -d -n $name
    fi
    tmux select-window -t $name
}

tmux_list_config() {
    tmux show -g
}

path() {
    echo $PATH | tr : '\n'
}

bfs() {
    i=1
    while results=$(find -mindepth $i -maxdepth $i "$@") && [[ -n $results ]]; do
        echo "$results" && ((i++))
    done
}
